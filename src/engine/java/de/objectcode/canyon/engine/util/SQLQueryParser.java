/* Generated By:JavaCC: Do not edit this line. SQLQueryParser.java */
package de.objectcode.canyon.engine.util;

import java.util.ArrayList;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import de.objectcode.canyon.spi.filter.AndFilter;
import de.objectcode.canyon.spi.filter.BetweenFilter;
import de.objectcode.canyon.spi.filter.CompareFilter;
import de.objectcode.canyon.spi.filter.IFilter;
import de.objectcode.canyon.spi.filter.InFilter;
import de.objectcode.canyon.spi.filter.IsNullFilter;
import de.objectcode.canyon.spi.filter.LikeFilter;
import de.objectcode.canyon.spi.filter.NotFilter;
import de.objectcode.canyon.spi.filter.OrFilter;

public class SQLQueryParser implements SQLQueryParserConstants {
  private final static  Log             log               = LogFactory.getLog( SQLQueryParser.class );

  final public IFilter SQLOrExpr() throws ParseException {
  OrFilter orFilter = new OrFilter();
  IFilter filter;
    filter = SQLAndExpr();
                          orFilter.addFilter(filter);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      filter = SQLAndExpr();
                            orFilter.addFilter(filter);
    }
    {if (true) return orFilter;}
    throw new Error("Missing return statement in function");
  }

  final public IFilter SQLAndExpr() throws ParseException {
  AndFilter andFilter = new AndFilter();
  IFilter filter;
    filter = SQLNotExpr();
                          andFilter.addFilter(filter);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      filter = SQLNotExpr();
                             andFilter.addFilter(filter);
    }
          {if (true) return andFilter;}
    throw new Error("Missing return statement in function");
  }

  final public IFilter SQLNotExpr() throws ParseException {
  IFilter filter;
  boolean notFlag = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
          notFlag = true;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    filter = SQLCompareExpr();
          if ( notFlag )
            {if (true) return new NotFilter ( filter );}
          {if (true) return filter;}
    throw new Error("Missing return statement in function");
  }

  final public IFilter SQLCompareExpr() throws ParseException {
  IFilter filter = null;
  String colName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      colName = SQLColRef();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
        filter = SQLIsClause(colName);
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(2)) {
          filter = SQLInClause(colName);
        } else if (jj_2_2(2)) {
          filter = SQLBetweenClause(colName);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIKE:
          case NOT:
            filter = SQLLikeClause(colName);
            break;
          case LESS:
          case LESSEQUAL:
          case GREATER:
          case GREATEREQUAL:
          case EQUAL:
          case NOTEQUAL:
          case NOTEQUAL2:
            filter = SQLCompareClause(colName);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      filter = SQLOrExpr();
      jj_consume_token(CLOSEPAREN);
    {if (true) return filter;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String SQLColRef() throws ParseException {
 Token x;
    x = jj_consume_token(ID);
          {if (true) return x.image;}
    throw new Error("Missing return statement in function");
  }

  final public IFilter SQLIsClause(String colName) throws ParseException {
  boolean notFlag = false;
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
            notFlag = true;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(NULL);
    if ( notFlag )
      {if (true) return new NotFilter ( new IsNullFilter(colName) );}
    {if (true) return new IsNullFilter(colName);}
    throw new Error("Missing return statement in function");
  }

  final public IFilter SQLInClause(String colName) throws ParseException {
  boolean notFlag = false;
  Object[] values;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
            notFlag = true;
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(IN);
    jj_consume_token(OPENPAREN);
    values = SQLLValueList();
    jj_consume_token(CLOSEPAREN);
    if ( notFlag )
      {if (true) return new NotFilter ( new InFilter(colName, values) );}
    {if (true) return new InFilter(colName, values);}
    throw new Error("Missing return statement in function");
  }

  final public Object[] SQLLValueList() throws ParseException {
  ArrayList values = new ArrayList();
  Object value;
    value = SQLValue();
                       values.add(value);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 131:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(131);
      value = SQLValue();
                         values.add(value);
    }
    {if (true) return values.toArray();}
    throw new Error("Missing return statement in function");
  }

  final public Object SQLValue() throws ParseException {
  Token x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL:
      x = jj_consume_token(STRING_LITERAL);
                           {if (true) return x.image;}
      break;
    case INTEGER_LITERAL:
      x = jj_consume_token(INTEGER_LITERAL);
                            {if (true) return new Integer(x.image);}
      break;
    case FLOATING_POINT_LITERAL:
      x = jj_consume_token(FLOATING_POINT_LITERAL);
                                   {if (true) return new Double(x.image);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IFilter SQLBetweenClause(String colName) throws ParseException {
  boolean notFlag = false;
  Object value1, value2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
            notFlag = true;
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(BETWEEN);
    value1 = SQLValue();
    jj_consume_token(AND);
    value2 = SQLValue();
    if ( notFlag )
      {if (true) return new NotFilter ( new BetweenFilter (colName, value1, value2) );}
    {if (true) return new BetweenFilter (colName, value1, value2);}
    throw new Error("Missing return statement in function");
  }

  final public IFilter SQLLikeClause(String colName) throws ParseException {
  boolean notFlag = false;
  Token x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
            notFlag = true;
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(LIKE);
    x = jj_consume_token(STRING_LITERAL);
    if ( notFlag )
      {if (true) return new NotFilter ( new LikeFilter(colName, x.image) );}
    {if (true) return new LikeFilter(colName, x.image);}
    throw new Error("Missing return statement in function");
  }

  final public IFilter SQLCompareClause(String colName) throws ParseException {
  Object value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      value = SQLValue();
                                            {if (true) return new CompareFilter(colName, CompareFilter.EQ, value);}
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      value = SQLValue();
                                        {if (true) return new CompareFilter(colName, CompareFilter.NE, value);}
      break;
    case NOTEQUAL2:
      jj_consume_token(NOTEQUAL2);
      value = SQLValue();
                                        {if (true) return new CompareFilter(colName, CompareFilter.NE, value);}
      break;
    case GREATER:
      jj_consume_token(GREATER);
      value = SQLValue();
                                        {if (true) return new CompareFilter(colName, CompareFilter.GT, value);}
      break;
    case GREATEREQUAL:
      jj_consume_token(GREATEREQUAL);
      value = SQLValue();
                                        {if (true) return new CompareFilter(colName, CompareFilter.GE, value);}
      break;
    case LESS:
      jj_consume_token(LESS);
      value = SQLValue();
                                        {if (true) return new CompareFilter(colName, CompareFilter.LT, value);}
      break;
    case LESSEQUAL:
      jj_consume_token(LESSEQUAL);
      value = SQLValue();
                                        {if (true) return new CompareFilter(colName, CompareFilter.LE, value);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_scan_token(NOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_6()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_scan_token(NOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_8()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public SQLQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  final private int[] jj_la1_0 = {0x0,0x100,0x0,0x20000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_1 = {0x10,0x0,0x2,0x0,0x2,0x0,0x2,0x2,0x0,0x0,0x2,0x2,0x0,};
  final private int[] jj_la1_2 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
  final private int[] jj_la1_3 = {0x0,0x0,0x0,0x0,0x7f00000,0x10000800,0x0,0x0,0x0,0x580,0x0,0x0,0x7f00000,};
  final private int[] jj_la1_4 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,};
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public SQLQueryParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SQLQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SQLQueryParser(SQLQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SQLQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enumExpentries = jj_expentries.elements(); enumExpentries.hasMoreElements();) {
        int[] oldentry = (int[])(enumExpentries.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[132];
    for (int i = 0; i < 132; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 132; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
