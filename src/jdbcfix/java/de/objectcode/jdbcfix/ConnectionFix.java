package de.objectcode.jdbcfix;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Map;

/**
 * @author junglas
 */
public class ConnectionFix implements Connection
{
  private Connection m_connection;
  
  public ConnectionFix ( Connection connection ) 
  {
    m_connection = connection;
  }
  
  /**
   * @param sql
   * @return
   * @throws java.sql.SQLException
   */
  public String nativeSQL(String sql) throws SQLException {
    return m_connection.nativeSQL(sql);
  }

  /* (non-Javadoc)
   * @see java.lang.Object#hashCode()
   */
  public int hashCode() {
    return m_connection.hashCode();
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public Map getTypeMap() throws SQLException {
    return m_connection.getTypeMap();
  }

  /**
   * @param sql
   * @return
   * @throws java.sql.SQLException
   */
  public PreparedStatement prepareStatement(String sql) throws SQLException {
    return new PreparedStmtFix(m_connection.prepareStatement(sql));
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public String getCatalog() throws SQLException {
    return m_connection.getCatalog();
  }

  /**
   * @param level
   * @throws java.sql.SQLException
   */
  public void setTransactionIsolation(int level) throws SQLException {
    m_connection.setTransactionIsolation(level);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getTransactionIsolation() throws SQLException {
    return m_connection.getTransactionIsolation();
  }

  /**
   * @param savepoint
   * @throws java.sql.SQLException
   */
  public void releaseSavepoint(Savepoint savepoint) throws SQLException {
    m_connection.releaseSavepoint(savepoint);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getHoldability() throws SQLException {
    return m_connection.getHoldability();
  }

  /**
   * @param sql
   * @param resultSetType
   * @param resultSetConcurrency
   * @param resultSetHoldability
   * @return
   * @throws java.sql.SQLException
   */
  public CallableStatement prepareCall(
    String sql,
    int resultSetType,
    int resultSetConcurrency,
    int resultSetHoldability)
    throws SQLException {
    return m_connection.prepareCall(
      sql,
      resultSetType,
      resultSetConcurrency,
      resultSetHoldability);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public boolean getAutoCommit() throws SQLException {
    return m_connection.getAutoCommit();
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public Statement createStatement() throws SQLException {
    return new StmtFix(m_connection.createStatement());
  }

  /**
   * @param sql
   * @return
   * @throws java.sql.SQLException
   */
  public CallableStatement prepareCall(String sql) throws SQLException {
    return m_connection.prepareCall(sql);
  }

  /**
   * @param autoCommit
   * @throws java.sql.SQLException
   */
  public void setAutoCommit(boolean autoCommit) throws SQLException {
    m_connection.setAutoCommit(autoCommit);
  }

  /**
   * @param sql
   * @param autoGeneratedKeys
   * @return
   * @throws java.sql.SQLException
   */
  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
    throws SQLException {
    return new PreparedStmtFix(m_connection.prepareStatement(sql, autoGeneratedKeys));
  }

  /**
   * @param readOnly
   * @throws java.sql.SQLException
   */
  public void setReadOnly(boolean readOnly) throws SQLException {
    m_connection.setReadOnly(readOnly);
  }

  /**
   * @param sql
   * @param resultSetType
   * @param resultSetConcurrency
   * @return
   * @throws java.sql.SQLException
   */
  public CallableStatement prepareCall(
    String sql,
    int resultSetType,
    int resultSetConcurrency)
    throws SQLException {
    return m_connection.prepareCall(sql, resultSetType, resultSetConcurrency);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public SQLWarning getWarnings() throws SQLException {
    return m_connection.getWarnings();
  }

  /**
   * @param sql
   * @param resultSetType
   * @param resultSetConcurrency
   * @return
   * @throws java.sql.SQLException
   */
  public PreparedStatement prepareStatement(
    String sql,
    int resultSetType,
    int resultSetConcurrency)
    throws SQLException {
    return new PreparedStmtFix(m_connection.prepareStatement(
      sql,
      resultSetType,
      resultSetConcurrency));
  }

  /* (non-Javadoc)
   * @see java.lang.Object#equals(java.lang.Object)
   */
  public boolean equals(Object obj) {
    return m_connection.equals(obj);
  }

  /**
   * @param sql
   * @param columnIndexes
   * @return
   * @throws java.sql.SQLException
   */
  public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
    throws SQLException {
    return new PreparedStmtFix(m_connection.prepareStatement(sql, columnIndexes));
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public boolean isClosed() throws SQLException {
    return m_connection.isClosed();
  }

  /**
   * @param sql
   * @param resultSetType
   * @param resultSetConcurrency
   * @param resultSetHoldability
   * @return
   * @throws java.sql.SQLException
   */
  public PreparedStatement prepareStatement(
    String sql,
    int resultSetType,
    int resultSetConcurrency,
    int resultSetHoldability)
    throws SQLException {
    return new PreparedStmtFix(m_connection.prepareStatement(
      sql,
      resultSetType,
      resultSetConcurrency,
      resultSetHoldability));
  }

  /**
   * @throws java.sql.SQLException
   */
  public void commit() throws SQLException {
    m_connection.commit();
  }

  /**
   * @throws java.sql.SQLException
   */
  public void clearWarnings() throws SQLException {
    m_connection.clearWarnings();
  }

  /**
   * @param catalog
   * @throws java.sql.SQLException
   */
  public void setCatalog(String catalog) throws SQLException {
    m_connection.setCatalog(catalog);
  }

  /**
   * @throws java.sql.SQLException
   */
  public void close() throws SQLException {
    m_connection.close();
  }

  /* (non-Javadoc)
   * @see java.lang.Object#toString()
   */
  public String toString() {
    return m_connection.toString();
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public DatabaseMetaData getMetaData() throws SQLException {
    return m_connection.getMetaData();
  }

  /**
   * @throws java.sql.SQLException
   */
  public void rollback() throws SQLException {
    m_connection.rollback();
  }

  /**
   * @param name
   * @return
   * @throws java.sql.SQLException
   */
  public Savepoint setSavepoint(String name) throws SQLException {
    return m_connection.setSavepoint(name);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public boolean isReadOnly() throws SQLException {
    return m_connection.isReadOnly();
  }

  /**
   * @param resultSetType
   * @param resultSetConcurrency
   * @return
   * @throws java.sql.SQLException
   */
  public Statement createStatement(int resultSetType, int resultSetConcurrency)
    throws SQLException {
    return new StmtFix(m_connection.createStatement(resultSetType, resultSetConcurrency));
  }

  /**
   * @param savepoint
   * @throws java.sql.SQLException
   */
  public void rollback(Savepoint savepoint) throws SQLException {
    m_connection.rollback(savepoint);
  }

  /**
   * @param sql
   * @param columnNames
   * @return
   * @throws java.sql.SQLException
   */
  public PreparedStatement prepareStatement(String sql, String[] columnNames)
    throws SQLException {
    return new PreparedStmtFix(m_connection.prepareStatement(sql, columnNames));
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public Savepoint setSavepoint() throws SQLException {
    return m_connection.setSavepoint();
  }

  /**
   * @param resultSetType
   * @param resultSetConcurrency
   * @param resultSetHoldability
   * @return
   * @throws java.sql.SQLException
   */
  public Statement createStatement(
    int resultSetType,
    int resultSetConcurrency,
    int resultSetHoldability)
    throws SQLException {
    return new StmtFix(m_connection.createStatement(
      resultSetType,
      resultSetConcurrency,
      resultSetHoldability));
  }

  /**
   * @param map
   * @throws java.sql.SQLException
   */
  public void setTypeMap(Map map) throws SQLException {
    m_connection.setTypeMap(map);
  }

  /**
   * @param holdability
   * @throws java.sql.SQLException
   */
  public void setHoldability(int holdability) throws SQLException {
    m_connection.setHoldability(holdability);
  }

}
