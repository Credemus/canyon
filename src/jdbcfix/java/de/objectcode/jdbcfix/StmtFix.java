package de.objectcode.jdbcfix;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * @author junglas
 */
public class StmtFix implements Statement{
  private Statement m_stmt;
  
  public StmtFix ( Statement stmt )
  {
    m_stmt = stmt;
  }
  
  /* (non-Javadoc)
   * @see java.lang.Object#hashCode()
   */
  public int hashCode() {
    return m_stmt.hashCode();
  }

  /**
   * @param sql
   * @return
   * @throws java.sql.SQLException
   */
  public boolean execute(String sql) throws SQLException {
    return m_stmt.execute(sql);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getFetchSize() throws SQLException {
    return m_stmt.getFetchSize();
  }

  /**
   * @param sql
   * @param columnIndexes
   * @return
   * @throws java.sql.SQLException
   */
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    return m_stmt.execute(sql, columnIndexes);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getUpdateCount() throws SQLException {
    return m_stmt.getUpdateCount();
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public ResultSet getGeneratedKeys() throws SQLException {
    return new ResultSetFix(m_stmt.getGeneratedKeys());
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public Connection getConnection() throws SQLException {
    return m_stmt.getConnection();
  }

  /**
   * @throws java.sql.SQLException
   */
  public void cancel() throws SQLException {
    m_stmt.cancel();
  }

  /**
   * @param max
   * @throws java.sql.SQLException
   */
  public void setMaxRows(int max) throws SQLException {
    m_stmt.setMaxRows(max);
  }

  /**
   * @param seconds
   * @throws java.sql.SQLException
   */
  public void setQueryTimeout(int seconds) throws SQLException {
    m_stmt.setQueryTimeout(seconds);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public SQLWarning getWarnings() throws SQLException {
    return m_stmt.getWarnings();
  }

  /**
   * @param sql
   * @throws java.sql.SQLException
   */
  public void addBatch(String sql) throws SQLException {
    m_stmt.addBatch(sql);
  }

  /* (non-Javadoc)
   * @see java.lang.Object#equals(java.lang.Object)
   */
  public boolean equals(Object obj) {
    return m_stmt.equals(obj);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getResultSetConcurrency() throws SQLException {
    return m_stmt.getResultSetConcurrency();
  }

  /**
   * @param sql
   * @param autoGeneratedKeys
   * @return
   * @throws java.sql.SQLException
   */
  public boolean execute(String sql, int autoGeneratedKeys)
    throws SQLException {
    return m_stmt.execute(sql, autoGeneratedKeys);
  }

  /**
   * @param rows
   * @throws java.sql.SQLException
   */
  public void setFetchSize(int rows) throws SQLException {
    m_stmt.setFetchSize(rows);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getFetchDirection() throws SQLException {
    return m_stmt.getFetchDirection();
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getQueryTimeout() throws SQLException {
    return m_stmt.getQueryTimeout();
  }

  /**
   * @param sql
   * @return
   * @throws java.sql.SQLException
   */
  public int executeUpdate(String sql) throws SQLException {
    return m_stmt.executeUpdate(sql);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getResultSetType() throws SQLException {
    return m_stmt.getResultSetType();
  }

  /**
   * @throws java.sql.SQLException
   */
  public void clearWarnings() throws SQLException {
    m_stmt.clearWarnings();
  }

  /**
   * @param max
   * @throws java.sql.SQLException
   */
  public void setMaxFieldSize(int max) throws SQLException {
    m_stmt.setMaxFieldSize(max);
  }

  /**
   * @param sql
   * @param columnNames
   * @return
   * @throws java.sql.SQLException
   */
  public int executeUpdate(String sql, String[] columnNames)
    throws SQLException {
    return m_stmt.executeUpdate(sql, columnNames);
  }

  /**
   * @throws java.sql.SQLException
   */
  public void close() throws SQLException {
    m_stmt.close();
  }

  /**
   * @param current
   * @return
   * @throws java.sql.SQLException
   */
  public boolean getMoreResults(int current) throws SQLException {
    return m_stmt.getMoreResults(current);
  }

  /* (non-Javadoc)
   * @see java.lang.Object#toString()
   */
  public String toString() {
    return m_stmt.toString();
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getMaxFieldSize() throws SQLException {
    return m_stmt.getMaxFieldSize();
  }

  /**
   * @param enable
   * @throws java.sql.SQLException
   */
  public void setEscapeProcessing(boolean enable) throws SQLException {
    m_stmt.setEscapeProcessing(enable);
  }

  /**
   * @throws java.sql.SQLException
   */
  public void clearBatch() throws SQLException {
    m_stmt.clearBatch();
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public boolean getMoreResults() throws SQLException {
    return m_stmt.getMoreResults();
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getMaxRows() throws SQLException {
    return m_stmt.getMaxRows();
  }

  /**
   * @param direction
   * @throws java.sql.SQLException
   */
  public void setFetchDirection(int direction) throws SQLException {
    m_stmt.setFetchDirection(direction);
  }

  /**
   * @param sql
   * @param columnIndexes
   * @return
   * @throws java.sql.SQLException
   */
  public int executeUpdate(String sql, int[] columnIndexes)
    throws SQLException {
    return m_stmt.executeUpdate(sql, columnIndexes);
  }

  /**
   * @param sql
   * @return
   * @throws java.sql.SQLException
   */
  public ResultSet executeQuery(String sql) throws SQLException {
    return new ResultSetFix(m_stmt.executeQuery(sql));
  }

  /**
   * @param sql
   * @param autoGeneratedKeys
   * @return
   * @throws java.sql.SQLException
   */
  public int executeUpdate(String sql, int autoGeneratedKeys)
    throws SQLException {
    return m_stmt.executeUpdate(sql, autoGeneratedKeys);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public ResultSet getResultSet() throws SQLException {
    return new ResultSetFix(m_stmt.getResultSet());
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int[] executeBatch() throws SQLException {
    return m_stmt.executeBatch();
  }

  /**
   * @param name
   * @throws java.sql.SQLException
   */
  public void setCursorName(String name) throws SQLException {
    m_stmt.setCursorName(name);
  }

  /**
   * @return
   * @throws java.sql.SQLException
   */
  public int getResultSetHoldability() throws SQLException {
    return m_stmt.getResultSetHoldability();
  }

  /**
   * @param sql
   * @param columnNames
   * @return
   * @throws java.sql.SQLException
   */
  public boolean execute(String sql, String[] columnNames)
    throws SQLException {
    return m_stmt.execute(sql, columnNames);
  }

}
